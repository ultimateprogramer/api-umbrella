lua_shared_dict test_data 32k;

server {
  listen 9444;
  listen [::]:9444;
  listen 9441;
  listen [::]:9441;

  set $x_api_umbrella_request_id $http_x_api_umbrella_request_id;
  lua_use_default_type off;
  default_type "";

  gzip off;

  access_by_lua 'ngx.shared.test_data:set("backend_called", true)';

  rewrite ^/backend-prefix/(.+)$ /$1 last;

  location /hello {
    if ($request_method != POST) {
      echo -n "Hello World";
    }

    if ($request_method = POST) {
      echo -n "Goodbye";
    }
  }

  location = /echo {
    echo_read_request_body;
    echo $request_body;
  }

  location = /echo_delayed_chunked {
    content_by_lua '
      local input = ngx.unescape_uri(ngx.var.arg_input)
      for index = 1, #input do
        local char = input:sub(index, index)
        ngx.print(char)
        ngx.flush()
        ngx.sleep(math.random(5, 15) / 1000)
      end
    ';
  }

  location = /restricted {
    echo -n "Restricted Access";
  }

  location = /not/restricted {
    echo -n "Not Restricted";
  }

  location = /utf8 {
    more_set_headers "X-Example: tést";
    echo -n "Hellö Wörld";
  }

  location = /sleep {
    echo_sleep 1;
    echo -n "Sleepy head";
  }

  location = /sleep_timeout {
    echo_sleep 1;
    echo -n "Sleepy head";
  }

  location /auth/ {
    access_by_lua '
      local username = ngx.var.remote_user
      local password = ngx.var.remote_passwd
      if username == "somebody" and password == "secret" then
        return
      elseif username == "anotheruser" and password == "anothersecret" then
        return
      else
        ngx.header["WWW-Authenticate"] = [[Basic realm="Authorization Required"]]
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.print("Unauthorized")
        ngx.exit(ngx.HTTP_OK)
      end
    ';
    echo -n $remote_user;
  }

  location /headers/ {
    more_set_headers "X-Existing1: existing1";
    more_set_headers "x-existing2: existing2";
    more_set_headers "X-EXISTING3: existing3";
    echo -n "Hello World";
  }

  location = /redirect {
    rewrite_by_lua 'ngx.redirect(ngx.unescape_uri(ngx.var.arg_to or "/hello"))';
  }

  location /info/ {
    more_set_headers "X-Received-Method: $request_method";
    content_by_lua '
      local cjson = require "cjson";
      local raw_url = ngx.var.scheme .. "://" .. ngx.var.host .. ngx.var.request_uri
      ngx.print(cjson.encode({
        method = ngx.var.request_method,
        headers = ngx.req.get_headers(500),
        local_interface_ip = ngx.var.server_addr,
        raw_url = raw_url,
        url = {
          host = ngx.var.host,
          hostname = ngx.var.hostname,
          href = raw_url,
          path = ngx.var.request_uri,
          pathname = ngx.var.uri,
          port = ngx.var.server_port,
          protocol = ngx.var.scheme .. ":",
          query = ngx.req.get_uri_args(500),
        },
        basic_auth_username = ngx.var.remote_user,
        basic_auth_password = ngx.var.remote_passwd,
      }))
    ';
  }

  location = /upload {
    content_by_lua '
      local cjson = require "cjson";
      local upload = require "resty.upload";

      local upload_size = 0
      local chunk_size = 4096
      local form = upload:new(chunk_size)
      while true do
        local typ, res, err = form:read()
        if typ == "body" then
          upload_size = upload_size + #res
        elseif typ == "eof" then
          break
        end
      end

      ngx.print(cjson.encode({
        upload_size = upload_size,
      }))
    ';
  }

  location = /chunked {
    echo -n "hello";
    echo_flush;
    echo_sleep 0.5;
    echo -n "salutations";
    echo_flush;
    echo_sleep 0.5;
    echo -n "goodbye";
  }

  location = /receive_chunks {
    # TODO
  }

  location ~ ^/compressible/([0-9]+)$ {
    set $size $1;
    content_by_lua '
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");
      ngx.header["Content-Length"] = ngx.var.size
      ngx.print(string.rep("a", tonumber(ngx.var.size)))
    ';
  }

  location ~ ^/compressible-chunked/([0-9]+)/([0-9]+)$ {
    set $chunks $1;
    set $size $2;
    content_by_lua '
      local size = tonumber(ngx.var.size)
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");
      ngx.sleep(0.05)
      for index = 1, tonumber(ngx.var.chunks) do
        ngx.print(string.rep("a", size))
      end
    ';
  }

  location ~ ^/compressible-delayed-chunked/([0-9]+)$ {
    set $size $1;
    content_by_lua '
      local size = tonumber(ngx.var.size)
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");

      ngx.print(string.rep("a", size))
      ngx.flush()
      ngx.sleep(0.5)

      ngx.print(string.rep("a", size))
      ngx.flush()
      ngx.sleep(0.5)

      ngx.print(string.rep("a", size))
    ';
  }

  location = /compressible-pre-gzip {
    gzip on;
    echo -n "Hello Small World";
  }

  location ~ ^/delay/([0-9]+)$ {
    set $delay $1;
    content_by_lua '
      ngx.sleep(tonumber(ngx.var.delay) / 1000)
      ngx.print("done")
    ';
  }

  location ~ ^/delays/([0-9]+)/([0-9]+)$ {
    set $delay1 $1;
    set $delay2 $2;
    content_by_lua '
      local delay1 = tonumber(ngx.var.delay1) / 1000
      local delay2 = tonumber(ngx.var.delay2) / 1000

      ngx.sleep(delay1)
      ngx.print("first")
      ngx.flush()

      ngx.sleep(delay2 - delay1)
      ngx.print("done")
      ngx.flush()
    ';
  }

  location = /timeout {
    access_by_lua '
      local key = "backend_call_count:" .. string.lower(ngx.var.request_method) .. "-timeout"
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 20;
    echo -n "done";
  }

  location = /between-varnish-timeout {
    access_by_lua '
      local key = "backend_call_count:post-between-varnish-timeout"
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 12.5;
    echo -n "done";
  }

  location /cacheable-but-not/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-thundering-herd/(.+)$ {
    set $unique_id $1;
    access_by_lua '
      local key = "backend_call_count:" .. ngx.var.unique_id
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 1;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-thundering-herd-public/(.+)$ {
    set $unique_id $1;
    access_by_lua '
      local key = "backend_call_count:" .. ngx.var.unique_id
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 1;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: public, max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-thundering-herd-private/(.+)$ {
    set $unique_id $1;
    access_by_lua '
      local key = "backend_call_count:" .. ngx.var.unique_id
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 1;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: private, max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-but-no-explicit-cache-thundering-herd/(.+)$ {
    set $unique_id $1;
    access_by_lua '
      local key = "backend_call_count:" .. ngx.var.unique_id
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 1;
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-but-cache-forbidden-thundering-herd/(.+)$ {
    set $unique_id $1;
    access_by_lua '
      local key = "backend_call_count:" .. ngx.var.unique_id
      return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
    ';

    echo_sleep 1;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=0, private, must-revalidate";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-cache-control-max-age/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-cache-control-s-maxage/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: s-maxage=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-cache-control-case-insensitive/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "CAcHE-cONTROL: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-expires/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    expires 60;
    echo $random;
  }

  location /cacheable-expires-0/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Expires: 0";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-expires-past/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Expires: Sat, 05 Sep 2015 17:58:16 GMT";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-set-cookie/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Set-Cookie: foo=bar";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-www-authenticate/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "WWW-Authenticate: Basic";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-max-age/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Surrogate-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-case-insensitive/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "SURrOGATE-CONtROL: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-and-cache-control/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Surrogate-Control: max-age=60";
    more_set_headers "Cache-Control: max-age=0, private, must-revalidate";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-dynamic/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-compressible/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-pre-gzip/ {
    gzip on;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-vary-accept-encoding/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: Accept-Encoding";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-pre-gzip-multiple-vary/ {
    gzip on;
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Encoding,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-vary-accept-encoding-multiple/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Encoding,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-vary-x-custom/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Vary: X-Custom";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-vary-accept-encoding-accept-separate/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Vary: Accept-Encoding";
    more_set_headers "Vary: Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-multiple-vary/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Language,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-multiple-vary-with-accept-encoding/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Language,Accept-Encoding,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-backend-reports-cached/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Age: 3";
    more_set_headers "X-Cache: HIT";
    echo $random;
  }

  location /cacheable-backend-reports-not-cached/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Age: 0";
    more_set_headers "X-Cache: BACKEND-MISS";
    echo $random;
  }

  location /cacheable-backend-port/ {
    more_set_headers "Cache-Control: max-age=60";
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo -n $server_port;
  }

  location /cacheable-backend-host/ {
    more_set_headers "Cache-Control: max-age=60";
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo -n $host;
  }

  location /via-header/ {
    more_set_headers "Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)";
    echo -n "hello";
  }

  location /logging-example/ {
    more_set_headers "Age: 20";
    more_set_headers "Content-Type: text/plain; charset=utf-8";
    more_set_headers "Content-Length: 5";
    expires 60;
    echo -n "hello";
  }

  location /logging-multiple-request-headers/ {
    content_by_lua_block {
      local cjson = require "cjson"
      local raw_header = ngx.req.raw_header(true)
      local _, num_matches = ngx.re.gsub(raw_header, "^" .. ngx.var.arg_header .. ": ", "", "im")
      ngx.print(cjson.encode({
        header_occurrences_received = num_matches,
      }))
    }
  }

  location /logging-multiple-response-headers/ {
    content_by_lua_block {
      ngx.header[ngx.var.arg_header] = { "11", "22" }
      ngx.print("OK")
    }
  }

  location /logging-long-response-headers/ {
    more_set_headers "Content-Encoding: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    more_set_headers "Content-Type: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    more_set_headers "Server: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    more_set_headers "Transfer-Encoding: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    echo $random;
  }

  location = / {
    echo -n "Test Home Page";
  }

  location / {
    echo_status 404;
    more_set_headers "Content-Type: text/html";
    echo -n "Test 404 Not Found";
  }
}

server {
  listen 9443;
  listen [::]:9443;

  location = / {
    echo -n "Test Website Home Page";
  }

  location / {
    echo_status 404;
    more_set_headers "Content-Type: text/html";
    echo -n "Test Website 404 Not Found";
  }
}

server {
  listen 9442;
  listen [::]:9442;

  set $x_api_umbrella_request_id $http_x_api_umbrella_request_id;

  location = /reset_backend_called {
    content_by_lua 'ngx.shared.test_data:set("backend_called", false)';
  }

  location = /backend_called {
    content_by_lua 'ngx.print(ngx.shared.test_data:get("backend_called"))';
  }

  location = /backend_call_count {
    content_by_lua 'ngx.print(ngx.shared.test_data:get("backend_call_count:" .. ngx.var.arg_id) or 0)';
  }
}
